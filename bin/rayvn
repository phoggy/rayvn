#!/usr/bin/env bash
# shellcheck disable=SC2155

# TODO:
#  - Move this project to the rayvn-roost repo?
#  - Create a rayvn-roost/rayvn-registry repo with administrators and projects directories for
#  - Update script to implement new usage.
#  -


readonly VERSION='rayvn 0.1.0'

usage() {
    echo
    echo "Manage shared bash libraries."
    echo
    echo "Usage: ${scriptName} COMMAND <options>"
    echo
    echo "User Commands"
    echo
    echo "    init                  Create the local repository and update ~/.bashrc to extend binary search PATH."
    echo "    install [PATH]        Add the rayvn project at PATH to the local repository."
    echo "    remove NAME           Remove the NAME project from the local repository."
    echo "    list [-g | --global]  List all projects in the local or global repository."
    echo "    help                  Display usage (same as -h or --help)."
    echo "    version               Display version (same as -v or --version)."
    echo
    echo "Developer Commands"
    echo
    echo "    admin PATH          Writes a new rayvn.admin template file to the PATH directory."
    echo "    guid                Return a new rayvn GUID."
    echo
    echo "Options:"
    echo
    echo "    -h, --help          Display usage."
    echo "    -v, --version       Display version."
    echo
    echo "The 'rayvn.pkg' may contain the following key=value declarations:"
    echo
    echo "  'namespace = <name>'  Declares the namespace name for shared libraries in the \${PATH}/lib directory."
    echo
    echo "  'binaries = <names>'  Declares one or more binaries int the \${PATH}/bin directory that should be included"
    echo "                        in the search path. Can be a comma separated list or '*' to add all."
    echo
    _exitRequire "${@}"
}

main() {
    init "${@}"
    case "${action}" in
        install) installProject ;;
        remove) removeNamespace ;;
        list) listNamespaces ;;
        test) testRequireCore ;;
        reset) reset ;;
        init) initHome ;;
        *) usage ;;
    esac
}

init() {
    readonly scriptName=$(basename "${0}")
    readonly rayvnHome="${HOME}/.rayvn"
    readonly bashrcFile="${HOME}/.bashrc"
    readonly rayvnLibDir="${rayvnHome}/lib"
    readonly rayvnBinDir="${rayvnHome}/bin"
    readonly bootFile="${rayvnHome}/boot.sh"
    readonly rayvnEnvFile="${rayvnHome}/rayvn.env"
    readonly packageFileName="rayvn.pkg"
    declare -gxAi RAYVN_LIBRARIES=()

    action=
    namespace=
    sourceDir=
    nameSpaceRef=

    while (( ${#} > 0 )); do
        case "${1}" in
            init) action='init' ;;
            install) shift; loadProject "${1}"; action='install' ;;
            -r | --remove) shift; loadProject "${1}"; action='remove' ;;
            -l | --list) action='list' ;;
            --reset) action='reset' ;;
            --test) action='test' ;;
            -h | --help) usage ;;
            --version) version ${VERSION} ;;
            *) usage "Unknown option: ${1}" ;;
        esac
        shift
    done

    if [[ ${action} ]]; then
        if [[ ${action} != 'reset' ]]; then
           initHome
        fi
    else
        usage
    fi
}

loadProject() {
    declare -g projectDir meta namespace binaries
    projectDir="${1}"

    [[ -d "${projectDir}" ]] || _exitRequire "project directory '${projectDir}' not found"
    projectDir="$(realpath ${projectDir})"

    metaFile="${projectDir}/${packageFileName}"
    [[ -f ${metaFile} ]] || _exitRequire "'${metaFile}' not found"
    meta="$(cat ${metaFile})"

    # Get supported declarations from the metadata

    namespace="$(getMetaValue namespace)"
    binaries="$(getMetaValue binaries)"

    # Do we have any declarations?

    if [[ ! ${namespace} && ! ${binaries} ]]; then
        _exitRequire "No supported '<key> = <value>' declarations found in '${metaFile}'"
    fi
}

getMetaValue() {
    local key=${1}
    local definition="$(echo "${meta}" | grep ${key} | tr -d '[:space:]')"
    definition=${definition%#*} # strip any comments

    if [[ ${definition} ]]; then
        local value="${definition#*=}"
        echo "${value}"
    fi
}

installProject() {

    [[ ${1} ]] && loadProject "${1}"

    # Install namespace if defined

    if [[ ${namespace} ]]; then
        sourceDir="${projectDir}/lib"
        [[ -d ${sourceDir} ]] || _exitRequire "directory '${sourceDir}' not found"
        nameSpaceRef="${rayvnLibDir}/${namespace}"
        [[ -e ${nameSpaceRef} ]] && _exitRequire "${namespace} already present: ${nameSpaceRef} "

        # Create namespace link to actual directory

        ln -s "${sourceDir}" "${nameSpaceRef}"
        echo "added shared library root ${sourceDir} as '${namespace}' namespace"
    fi

    # Install binaries if defined

    if [[ ${binaries} ]]; then

        local sourceDir="${projectDir}/bin"
        [[ -d ${sourceDir} ]] || _exitRequire "directory '${sourceDir}' not found"
        local executables=()

        # Yes. All of them?

        if [[ ${binaries} == '*' ]]; then

            # Yes, so build list

            for fileName in $(ls -1 "${sourceDir}" | tr '\n' ' '); do
                executables+=("${fileName}")
            done

        else
            # Nope, specific ones

            executables=("$(echo ${binaries} | tr ',' ' ')")
        fi

        # Install links for each

        for binary in "${executables[@]}"; do
            local binaryRef="${rayvnBinDir}/${binary}"
            local binarySrc="${sourceDir}/${binary}"
            ln -s "${binarySrc}" "${binaryRef}"
            echo "added executable ${binary}"
        done
    fi
}

listNamespaces() {
    cd "${rayvnLibDir}" || _exitRequire "rayvn not installed!"
    ls -l
}

removeNamespace() {
    [[ -e ${nameSpaceRef} ]] || _exitRequire "${namespace} not found"
    currentNameSpaceDir="$(realpath "${sourceDir}")"
    [[ ${sourceDir} == "${currentNameSpaceDir}" ]] || _exitRequire "namespace '${namespace} points elsewhere: ${currentNameSpaceDir}"
    echo "removing '${sourceDir}' as '${namespace}'"
    unlink "${nameSpaceRef}"
}

testRequireCore() {
    [[ ${RAYVN_LIBRARY_rayvn__core} ]] && _exitRequire "rayvn/core already loaded!"

    # this is how each script is supposed to bring it in.
    source "${HOME}/.rayvn/boot.sh" 2> /dev/null || { echo 'rayvn not installed' && exit 0; }
    require 'rayvn/core'

    echo "'$(ansi bold require rayvn/core)' worked if $(ansi bold_green this) line has $(ansi magenta colored) text"
    [[ ${RAYVN_LIBRARY_rayvn__core} ]] || _exitRequire "rayvn/core not loaded!"
    [[ ${RAYVN_LIBRARY_rayvn__core} == 'loaded' ]] || _exitRequire "rayvn/core variable set to unexpected value: ${RAYVN_LIBRARY_rayvn__core}!"
}

reset() {
   rm -rf "${rayvnHome}" || _exitRequire
   initHome
}

initHome() {
    if [[ ! -f ${bootFile} ]]; then
        mkdir -p "${rayvnLibDir}" 2> /dev/null
        mkdir -p "${rayvnBinDir}" 2> /dev/null

        # generate rayvn.env file
        (
            # Ensure rayvn binaries can be found

            declare -f ensureInPath
            echo
            echo "ensureInPath rayvn ${rayvnBinDir}"

        ) > "${rayvnEnvFile}"

        # Modify .bashrc to source our env file

        if ! grep "${rayvnEnvFile}" ${bashrcFile} > /dev/null; then
            (
                echo
                echo "source ${rayvnEnvFile} # init rayvn environment"

            ) >>"${bashrcFile}"
            echo "updated \${HOME}.bashrc to 'source ${rayvnEnvFile}' so either start a new shell or execute that command"
        fi

        # generate boot script

        (
            echo "#!/usr/bin/env bash"
            echo
            echo "declare -grx rayvnLibDir=\"\${HOME}/.rayvn/lib\""
            echo "declare -grx rayvnBinDir=\"\${HOME}/.rayvn/bin\""
            echo "declare -gxAi RAYVN_LIBRARIES=()"
            echo
            declare -f require       # print function
            echo
            declare -f _exitRequire  # print function
            echo
            echo "declare -rf require _exitRequire"

        ) > "${bootFile}"

        # Install rayvn itself

        installProject "$(realpath "${BASH_SOURCE%/*/*}")"
    fi
}

require() {
    local qualifiedName="${1}"
    local projectName="${qualifiedName%/*}"
    local libraryName="${qualifiedName#*/}"
    local key="${projectName}_${libraryName}"

    (( RAYVN_LIBRARIES[${projectName}]++ ))

    if [[ -v RAYVN_LIBRARIES[${key}] ]]; then
        (( RAYVN_LIBRARIES[${key}]++ ))
    else
        local projectDir="${rayvnLibDir}/${projectName}"
        local libraryFile="${projectDir}/${libraryName}.sh"
        [[ -d ${projectDir} ]] || _exitRequire "rayvn project '${projectName}' not found"
        [[ -f ${libraryFile} ]] || _exitRequire "rayvn library '${libraryName}' not found at ${libraryFile}"
        #echo "${BASHPID}: BEGIN loading ${libraryFile}" >> /tmp/debug.log
        source "${libraryFile}"
        local initFunction="init_${projectName}_${libraryName}"
        if [[ $(type -t ${initFunction}) == function ]]; then
            #echo "    ${BASHPID}: initializing ${libraryFile}" >> /tmp/debug.log
            ${initFunction}
        fi

        # We've successfully loaded the library, so set the initial count

        RAYVN_LIBRARIES[${key}]=1

        # Ensure ${projectName}_HOME is set so libraries can reference their own dirs
        # and test whether any libraries

        local homeVar="${projectName^^}_HOME"
        if [[ ! ${homeVar} ]]; then
            local homeDir="$(realpath ${projectDir}/..)"
            declare -grx ${homeVar}="${homeDir}"
        fi
    fi
}

_exitRequire() {
    if [[ ${1} ]]; then
        echo "${@}"
        exit 1
    else
        exit 0
    fi
}

ensureInPath() {
    local executable="${1}"
    local executableDir="${2}"
    local foundPath="$(which ${executable})"
    [[ ${foundPath} ]] || declare -gx PATH="${PATH}:${executableDir}"
}

# createProjectFile test bob/test robert robert@foo.com ${HOME}/dev/rayvn-registry
createProjectFile() {
    local projectName="${1}"
    local projectRepo="${2}"
    local adminName="${3}"
    local adminEmail="${4}"
    local registryRepoDir="${5}"
    local projectsDir="${registryRepoDir}/projects"
    local projectFile="${projectsDir}/${projectName}"

    # make sure repo is valid

    if [[ "${projectRepo}" =~ ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
        if ! git ls-remote https://github.com/${projectRepo} > /dev/null 2>&1; then
            _exitRequire "${projectRepo} not found on GitHub"
        fi
    else
        _exitRequire "Invalid GitHub username/repository name: ${projectRepo}"
    fi

    # make sure email is valid

    if [[ ! "${adminEmail}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
        _exitRequire "Email address ${adminEmail} is invalid."
    fi

    # make sure the repo directory exists

    [[ -d "${registryRepoDir}" ]] || _exitRequire "${registryRepoDir} not found"

    # make sure the projects directory exists

    mkdir -p "${projectsDir}"

    # we're good, so write it out

    (
        echo "# rayvn project registration"
        echo
        echo "project.name = ${projectName}"
        echo "project.repo = ${projectRepo}"
        echo
        echo "admin.name = ${adminName}"
        echo "admin.email = ${adminEmail}"

    ) > "${projectFile}"

    echo
    echo "Created project file ${projectFile}:"
    echo
    cat "${projectFile}"
    echo
}

main "${@}"





