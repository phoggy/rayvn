#!/usr/bin/env bash
# shellcheck disable=SC2155


# TODO: do we need this script at all any more?
# TODO: if so, update script to implement new usage and commands in README.md

usage() {
    echo
    echo "$(ansi bold Manage shared bash libraries and executables)."
    echo
    echo "Usage: $(ansi bold rayvn) COMMAND <options>"
    echo
    echo "User Commands"
    echo
    echo "    list   List all projects in the local or global repository."
    echo "    help                  Display usage (same as -h or --help)."
    echo
    echo "Developer Commands"
    echo
    echo "    admin PATH          Writes a new rayvn.admin template file to the PATH directory."
    echo "    guid                Return a new rayvn GUID."
    echo
    echo "Options:"
    echo
    echo "    -h, --help          Display usage."
    echo "    -v                  Display version."
    echo "    --version           Display verbose version."
    echo
    echo "The 'rayvn.pkg' may contain the following key=value declarations:"
    echo
    echo "  'namespace = <name>'  Declares the namespace name for shared libraries in the \${PATH}/lib directory."
    echo
    echo "  'binaries = <names>'  Declares one or more binaries int the \${PATH}/bin directory that should be included"
    echo "                        in the search path. Can be a comma separated list or '*' to add all."
    echo
    bye "${@}"
}

main() {
    init "${@}"
    for action in "${actions[@]}"; do
        if declare -F "${action% *}" > /dev/null; then
            ${action}
        else
            fail "${action} is not an available function"
        fi
    done
}

init() {

    # process arguments

    unset debugOptions
    actions=()
    roots=

    while (( ${#} > 0 )); do
        case "${1}" in
            test) actions+=('runAllTests') ;;
            libs) actions+=('withEachLibrary _printLibrary') ;;
            deps) actions+=('assertDependencies') ;;
            --add) shift; addRoot "${1}" ;;
            --debug) debugOptions='showOnExit' ;;
            --debug-new) debugOptions 'clearLog showOnExit' ;;
            --debug-out) debugOptions='noLog' ;;
            -h | --help) usage ;;
            -v) projectVersion rayvn; exit 0 ;;
            --version) projectVersion rayvn true; exit 0 ;;
            -*) usage "Unknown option: ${1}" ;;
            *) actions+=("${1}")
        esac
        shift
    done

    # Boot rayvn, adding any additional roots, then load core and debug
    source rayvn.up ${roots} 'rayvn/core' 'rayvn/debug'

    [[ -v actions ]] || usage
    [[ -v debugOptions ]] && setDebug ${debugOptions}

    debug "actions: " ${actions}
}

addRoot() {
    roots="${roots:+${roots} }--add ${1}"
}

assertDependencies() {
    require 'rayvn/safe-env'
    for key in "${!_rayvnProjects[@]}"; do
        if [[ ${key} == *::project ]]; then
            local name="${key%%::*}"
            local pkgFile="${_rayvnProjects[${name}${_projectRootSuffix}]}/rayvn.pkg"
            (
                sourceSafeStaticVars "${pkgFile}" project
                declare -p projectName projectVersion projectDependencies
                if [[ -v projectDependencies ]]; then
                    assertExecutables projectDependencies
                fi
            )
        fi
    done
}

withEachLibrary() {
    for key in "${!_rayvnProjects[@]}"; do
        if [[ ${key} == *::library ]]; then
            local project="${key%%::*}"  # remove everything from :: onward
            local libraryRoot="${_rayvnProjects[${key}]}"
            for file in "${libraryRoot}"/*.sh; do
                [[ -e ${file} ]] || fail "no libraries found for '${project}' at ${libraryRoot}"
                local fileName="$(basename "${file}")"
                local library="${fileName%.*}"
                "${*}" "${project}" "${library}" "${file}"
            done
        fi
    done
}

_printLibrary() {
    local projectName="${1}"
    local libraryName="${2}"
    local libraryRoot="${3}"
    echo "${projectName}/${libraryName} -> ${libraryRoot}"
}

runAllTests() {
    local entry projectDir
    for entry in "${!_rayvnProjects[@]}"; do
        if [[ "${entry}" == *::project ]]; then
            projectDir=${_rayvnProjects[${entry}]}
            runProjectTests "${projectDir}"
        fi
    done
}

runProjectTests() {
    local projectDir="${1}"
    local testDir="${projectDir}/test"
    if [[ -d "${testDir}" ]]; then
        local tests=("${testDir}"/test-*.sh)
        for testFile in "${tests[@]}"; do
            runTest "${projectDir}" "${testFile}"
        done
    fi
}

runTest() {
    local projectDir="${1}"
    local testFile="${2}"
    local projectName=$(basename "${projectDir}")
    assertFileExists "${testFile}"
    local fileName="$(basename ${testFile})"
    local testName="${fileName#test-}"
    testName="${testName%.sh}"
    (
        if [[ -x "${testFile}" ]]; then
            echo
            echo "--- Project $(ansi bold ${projectName}): $(ansi cyan ${testName}) test ------------------------------"
            echo
            if [[ ${projectName} == "rayvn" && ${testName} == "rayvn-up" ]]; then
                (
                    # debugEnvironment "rayvn env, prior to running ${testFile}" "rayvn-subshell"

                    # We must create special conditions for this test so that the process it runs in does
                    # NOT contain any functions from this process (esp. rayvn.up and core.sh) and that all
                    # rayvn variables are excluded.
                    #
                    # These preconditions for the test are required so that rayvn init acts exactly as it
                    # would the first time a user invokes it.

                    # First, collect the names of all existing vars whose names start with 'rayvn', ignoring case so
                    # we can remove them.

                    local removeVars var
                    for var in $(compgen -v | grep -i 'rayvn'); do
                        removeVars+="-u ${var} "
                    done

                    # Second, export var pointing to the current rayvnHome and binary

                    export rayvnInstallHome="${rayvnHome}"
                    export rayvnInstallBinary="${rayvnHome}/bin/rayvn"

                    # Third, export a list of the function names within the test itself so
                    # that it can ensure that no other functions are present, e.g. require

                    export testFunctionNames=$(grep -E '^\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\(\)' "${testFile}" | \
                            awk '{gsub(/\(\)/, "", $1); printf "%s ", $1}')
                    testFunctionNames="${testFunctionNames%" "}"

                    # Log vars if in debug mode

                    # TODO: only works if library loaded, so add a flag to
                    #  debugVars removeVars rayvnInstallHome rayvnInstallBinary testFunctionNames testFile SHELL

                    # Create any args we need for the test

                    local args
                    [[ ${_debug} ]] && args='--debug'

                    # Finally, run the test without functions or rayvn vars in its env, and without sourcing
                    # any init files

                    env ${removeVars} ${SHELL} --noprofile --norc -c "${testFile}" ${args}
                )
            else
                (
                    "${SHELL}" "${testFile}"
                )
            fi
            if [[ ${?} == 0 ]]; then
                echo "$(ansi bold_green PASSED)"
            else
                echo "$(ansi bold_red FAILED)"
            fi
        else
            warn "Skipping ${testFile}: not executable"
        fi
    )
}

printFunction() {
    local name="${1}"
    printf "%s() {\n%s\n" "${name}" "$(declare -f "${name}" | tail -n +3)"
}


ensureInPath() {
    local executable="${1}"
    local executableDir="${2}"
    command -v ${executable} &> /dev/null || declare -gx PATH="${PATH:+$PATH:}${executableDir}"
}

# createProjectFile test bob/test robert robert@foo.com ${HOME}/dev/rayvn-registry
createProjectFile() {
    local projectName="${1}"
    local projectRepo="${2}"
    local adminName="${3}"
    local adminEmail="${4}"
    local registryRepoDir="${5}"
    local projectsDir="${registryRepoDir}/projects"
    local projectFile="${projectsDir}/${projectName}"

    # make sure repo is valid

    if [[ "${projectRepo}" =~ ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
        if ! git ls-remote https://github.com/${projectRepo} &> /dev/null; then
            fail "${projectRepo} not found on GitHub"
        fi
    else
        fail "Invalid GitHub username/repository name: ${projectRepo}"
    fi

    # make sure email is valid

    if [[ ! "${adminEmail}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
        fail "Email address ${adminEmail} is invalid."
    fi

    # make sure the repo directory exists

    [[ -d "${registryRepoDir}" ]] || fail "${registryRepoDir} not found"

    # make sure the projects directory exists

    mkdir -p "${projectsDir}"

    # we're good, so write it out

    (
        echo "# rayvn project registration"
        echo
        echo "project.name = ${projectName}"
        echo "project.repo = ${projectRepo}"
        echo
        echo "admin.name = ${adminName}"
        echo "admin.email = ${adminEmail}"

    ) > "${projectFile}"

    echo
    echo "Created project file ${projectFile}:"
    echo
    cat "${projectFile}"
    echo
}

main "${@}"
