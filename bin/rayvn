#!/usr/bin/env bash
# shellcheck disable=SC2155


# TODO: do we need this script at all any more?
# TODO: if so, update script to implement new usage and commands in README.md

usage() {
    echo
    echo "$(ansi bold Manage shared bash libraries and executables)."
    echo
    echo "Usage: $(ansi bold rayvn) COMMAND <options>"
    echo
    echo "User Commands"
    echo
    echo "    list   List all projects in the local or global repository."
    echo "    help                  Display usage (same as -h or --help)."
    echo
    echo "Developer Commands"
    echo
    echo "    admin PATH          Writes a new rayvn.admin template file to the PATH directory."
    echo "    guid                Return a new rayvn GUID."
    echo
    echo "Options:"
    echo
    echo "    -h, --help          Display usage."
    echo "    -v                  Display version."
    echo "    --version           Display verbose version."
    echo
    echo "The 'rayvn.pkg' may contain the following key=value declarations:"
    echo
    echo "  'namespace = <name>'  Declares the namespace name for shared libraries in the \${PATH}/lib directory."
    echo
    echo "  'binaries = <names>'  Declares one or more binaries int the \${PATH}/bin directory that should be included"
    echo "                        in the search path. Can be a comma separated list or '*' to add all."
    echo
    bye "${@}"
}

main() {
    init "${@}"
    ${command} "${args[@]}"
}

init() {
    unset debugOptions
    command=
    args=()
    upOptions=

    # process arguments

    while (( ${#} > 0 )); do
        case "${1}" in
            test) command=runAllTests ;;
            libs) command=withEachLibrary; args+=('_printLibrary') ;;
            assertDeps) command=assertDependenciesQuiet; shift; args+=("${1}") ;;
            assertDepsVerbose) command=assertDependenciesVerbose; shift; args+=("${1}") ;;
            brewDeps) command=brewDependencies; shift; args+=("${1}") ;;
            release) command=releaseProject; shift; args+=("${1}"); addProject "${1}"; shift; args+=("${1}") ;;
            -p | --project) shift; addProject "${1}" ;;
            --debug) debugOptions='showOnExit' ;;
            --debug-new) debugOptions='clearLog showOnExit' ;;
            --debug-out) debugOptions='noLog' ;;
            -h | --help) usage ;;
            -v) printVersion; exit 0 ;;
            --version) printVersion true; exit 0 ;;
            -*) usage "Unknown option: ${1}" ;;
            *) command+=("${1}")
        esac
        shift
    done

    # Boot rayvn, adding any additional projects, then load core and debug
    source rayvn.up ${upOptions} 'rayvn/core' 'rayvn/debug'

    [[ -v command ]] || usage
    [[ -v debugOptions ]] && setDebug ${debugOptions}

    debug "command: ${command} ${args[*]}"
}

trim() {
    local value="${1}"
    value="${value#"${value%%[![:space:]]*}"}"  # remove leading whitespace
    value="${value%"${value##*[![:space:]]}"}"  # remove trailing whitespace
    echo "${value}"
}

addProject() {
    local project="${1#*/}"
    [[ ${project} == rayvn ]] && return 0
    [[ ${upOptions} != *project* ]] && upOptions+=" --add ${project}"
}

releaseProject() {
    local ghRepo="${1}"
    local version="${2}"
    require 'rayvn/release'
    case "${ghRepo}" in
        */*) ;; # expected format
        rayvn) ghRepo='phoggy/rayvn' ;;
        valt) ghRepo='phoggy/valt' ;;
        wardn) ghRepo='phoggy/wardn' ;;
        *) fail "unknown GitHub repo '${ghRepo}', please specify in accountName/repoName format."
    esac
    release "${ghRepo}" "${version}"
}

assertDependenciesQuiet() {
    local projectName="${1}"
    require 'rayvn/dependencies'
    assertDependencies "${projectName}"
}

assertDependenciesVerbose() {
    local projectName="${1}"
    require 'rayvn/dependencies'
    assertDependencies "${projectName}" 1
}

brewDependencies() {
    local projectName="${1}"
    require 'rayvn/dependencies'
    listBrewDependencies "${projectName}"
}

forEachProject() {
    for key in "${!_rayvnProjects[@]}"; do
        if [[ ${key} == *::library ]]; then
            local projectName="${key%%::*}"
            local libraryRoot="${_rayvnProjects[${key}]}"
            "${*}" "${projectName}" "${libraryRoot}"
        fi
    done
}

forEachLibrary() {
    for key in "${!_rayvnProjects[@]}"; do
        if [[ ${key} == *::library ]]; then
            local project="${key%%::*}"  # remove everything from :: onward
            local libraryRoot="${_rayvnProjects[${key}]}"
            for file in "${libraryRoot}"/*.sh; do
                [[ -e ${file} ]] || fail "no libraries found for '${project}' at ${libraryRoot}"
                local fileName="$(basename "${file}")"
                local library="${fileName%.*}"
                "${*}" "${project}" "${library}" "${file}"
            done
        fi
    done
}

printVersion() {
    local verbose="${1:-}"
    if ! declare -p _rayvnProjects &> /dev/null; then
        source rayvn.up 'rayvn/core'
    fi
    projectVersion rayvn "${verbose}"
}

_printLibrary() {
    local projectName="${1}"
    local libraryName="${2}"
    local libraryRoot="${3}"
    echo "${projectName}/${libraryName} -> ${libraryRoot}"
}

_projectNames() {
    local -n resultArray="${1}"
    local entry
    resultArray=()
    for entry in "${!_rayvnProjects[@]}"; do
        if [[ "${entry}" == *::project ]]; then
            resultArray+=("${entry%::*}")
        fi
    done
}

runAllTests() {
    local entry projectDir
    for entry in "${!_rayvnProjects[@]}"; do
        if [[ "${entry}" == *::project ]]; then
            projectDir=${_rayvnProjects[${entry}]}
            runProjectTests "${projectDir}"
        fi
    done
}

runProjectTests() {
    local projectDir="${1}"
    local testDir="${projectDir}/test"
    if [[ -d "${testDir}" ]]; then
        local tests=("${testDir}"/test-*.sh)
        for testFile in "${tests[@]}"; do
            runTest "${projectDir}" "${testFile}"
        done
    fi
}

runTest() {
    local projectDir="${1}"
    local testFile="${2}"
    local projectName=$(basename "${projectDir}")
    assertFileExists "${testFile}"
    local fileName="$(basename ${testFile})"
    local testName="${fileName#test-}"
    testName="${testName%.sh}"
    (
        if [[ -x "${testFile}" ]]; then
            echo
            echo "--- Project $(ansi bold ${projectName}): $(ansi cyan ${testName}) test ------------------------------"
            echo
            if [[ ${projectName} == "rayvn" && ${testName} == "rayvn-up" ]]; then
                (
                    # debugEnvironment "rayvn env, prior to running ${testFile}" "rayvn-subshell"

                    # We must create special conditions for this test so that the process it runs in does
                    # NOT contain any functions from this process (esp. rayvn.up and core.sh) and that all
                    # rayvn variables are excluded.
                    #
                    # These preconditions for the test are required so that rayvn init acts exactly as it
                    # would the first time a user invokes it.

                    # First, collect the names of all existing vars whose names start with 'rayvn', ignoring case so
                    # we can remove them.

                    local removeVars var
                    for var in $(compgen -v | grep -i 'rayvn'); do
                        removeVars+="-u ${var} "
                    done

                    # Second, export var pointing to the current rayvnHome and binary

                    export rayvnInstallHome="${rayvnHome}"
                    export rayvnInstallBinary="${rayvnHome}/bin/rayvn"

                    # Third, export a list of the function names within the test itself so
                    # that it can ensure that no other functions are present, e.g. require

                    export testFunctionNames=$(grep -E '^\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\(\)' "${testFile}" | \
                            awk '{gsub(/\(\)/, "", $1); printf "%s ", $1}')
                    testFunctionNames="${testFunctionNames%" "}"

                    # Log vars if in debug mode

                    # TODO: only works if library loaded, so add a flag to
                    #  debugVars removeVars rayvnInstallHome rayvnInstallBinary testFunctionNames testFile SHELL

                    # Create any args we need for the test

                    local args
                    [[ ${_debug} ]] && args='--debug'

                    # Finally, run the test without functions or rayvn vars in its env, and without sourcing
                    # any init files

                    env ${removeVars} ${SHELL} --noprofile --norc -c "${testFile}" ${args}
                )
            else
                (
                    "${SHELL}" "${testFile}"
                )
            fi
            if [[ ${?} == 0 ]]; then
                echo "$(ansi bold_green PASSED)"
            else
                echo "$(ansi bold_red FAILED)"
            fi
        else
            warn "Skipping ${testFile}: not executable"
        fi
    )
}

printFunction() {
    local key="${1}"
    printf "%s() {\n%s\n" "${name}" "$(declare -f "${name}" | tail -n +3)"
}


ensureInPath() {
    local executable="${1}"
    local executableDir="${2}"
    command -v ${executable} &> /dev/null || declare -gx PATH="${PATH:+$PATH:}${executableDir}"
}

# createProjectFile test bob/test robert robert@foo.com ${HOME}/dev/rayvn-registry
createProjectFile() {
    local projectName="${1}"
    local projectRepo="${2}"
    local adminName="${3}"
    local adminEmail="${4}"
    local registryRepoDir="${5}"
    local projectsDir="${registryRepoDir}/projects"
    local projectFile="${projectsDir}/${projectName}"

    # make sure repo is valid

    if [[ "${projectRepo}" =~ ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
        if ! git ls-remote https://github.com/${projectRepo} &> /dev/null; then
            fail "${projectRepo} not found on GitHub"
        fi
    else
        fail "Invalid GitHub username/repository name: ${projectRepo}"
    fi

    # make sure email is valid

    if [[ ! "${adminEmail}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
        fail "Email address ${adminEmail} is invalid."
    fi

    # make sure the repo directory exists

    [[ -d "${registryRepoDir}" ]] || fail "${registryRepoDir} not found"

    # make sure the projects directory exists

    mkdir -p "${projectsDir}"

    # we're good, so write it out

    (
        echo "# rayvn project registration"
        echo
        echo "project.name = ${projectName}"
        echo "project.repo = ${projectRepo}"
        echo
        echo "admin.name = ${adminName}"
        echo "admin.email = ${adminEmail}"

    ) > "${projectFile}"

    echo
    echo "Created project file ${projectFile}:"
    echo
    cat "${projectFile}"
    echo
}

main "${@}"
