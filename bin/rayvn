#!/usr/bin/env bash
# shellcheck disable=SC2155

# TODO: Update script to implement new usage and commands in README.md

declare -grx RAYVN_VERSION='rayvn 0.1.0'

usage() {
    echo
    echo "Manage shared bash libraries."
    echo
    echo "Usage: ${rayvnBinaryName} COMMAND <options>"
    echo
    echo "User Commands"
    echo
    echo "    init                  Create the local repository and update ~/.bashrc to extend binary search PATH."
    echo "    install [PATH]        Add the rayvn project at PATH to the local repository."
    echo "    remove NAME           Remove the NAME project from the local repository."
    echo "    list [-g | --global]  List all projects in the local or global repository."
    echo "    help                  Display usage (same as -h or --help)."
    echo "    version               Display version (same as -v or --version)."
    echo
    echo "Developer Commands"
    echo
    echo "    admin PATH          Writes a new rayvn.admin template file to the PATH directory."
    echo "    guid                Return a new rayvn GUID."
    echo
    echo "Options:"
    echo
    echo "    -h, --help          Display usage."
    echo "    -v, --version       Display version."
    echo
    echo "The 'rayvn.pkg' may contain the following key=value declarations:"
    echo
    echo "  'namespace = <name>'  Declares the namespace name for shared libraries in the \${PATH}/lib directory."
    echo
    echo "  'binaries = <names>'  Declares one or more binaries int the \${PATH}/bin directory that should be included"
    echo "                        in the search path. Can be a comma separated list or '*' to add all."
    echo
    bye "${@}"
}

main() {
    init "${@}"
    case "${action}" in
        install) installProject ;;
        remove) removeNamespace ;;
        list) listNamespaces ;;
        test) runAllTests ;;
        reset) reset ;;
        init) initHome ;;
        *) usage ;;
    esac
}

init() {

    # installation vars

    declare -grx rayvnBinaryFile="$(realpath "${0}")"
    declare -grx rayvnBinaryName=$(basename "${rayvnBinaryFile}")
    declare -grx rayvnBinaryHome=$(realpath "$(dirname "${rayvnBinaryFile}/../../..")")
    declare -grx rayvnBinaryLibDir="${rayvnBinaryHome}/lib"
    declare -grx rayvnBinaryBinDir="${rayvnBinaryHome}/bin"

    # config directory vars

    declare -grx rayvnConfigDir="${HOME}/.rayvn"
    declare -grx rayvnConfigPkgDir="${rayvnConfigDir}/pkg"
    declare -grx rayvnConfigLibDir="${rayvnConfigDir}/lib"
    declare -grx rayvnConfigBinDir="${rayvnConfigDir}/bin"
    declare -grx rayvnConfigBootFile="${rayvnConfigDir}/boot.sh"
    declare -grx rayvnConfigEnvFile="${rayvnConfigDir}/rayvn.env"

    # misc vars

    declare -grx rayvnPackageFileName="rayvn.pkg"
    declare -gAix RAYVN_LIBRARIES=()
    declare -r bashrcFile="${HOME}/.bashrc"

    # "require" our rayvn/core library

    requireRayvnCore

    # Make sure we have a valid bash version

    assertBashVersion

    # process arguments

    action=
    projectName=
    sourceDir=
    namespaceRef=

    while (( ${#} > 0 )); do
        case "${1}" in
            init) action='init' ;;
            install) shift; loadProject "${1}"; action='install' ;;
            remove) shift; loadProject "${1}"; action='remove' ;;
            list) action='list' ;;
            reset) action='reset' ;;
            test) action='test' ;;
            deps) action='deps' ;;
            -h | --help) usage ;;
            -v | --version) version "${RAYVN_VERSION}" ;;
            *) usage "Unknown option: ${1}" ;;
        esac
        shift
    done

    if [[ ${action} ]]; then
        if [[ ${action} != 'reset' ]]; then
            initHome
        fi
    else
        usage
    fi
}

requireRayvnCore() {
    local coreFile="${rayvnBinaryLibDir}/core.sh"
    source "${coreFile}" || exit 1
}

loadProject() {
    # declare -p projectDir projectName projectVersion projectHasLibraries projectBinaries  # TODO REMOVE

    projectDir="${1}"
    assertDirectory "${projectDir}"
    projectDir="$(realpath ${projectDir})"

    local packageFile="${projectDir}/${rayvnPackageFileName}"
    assertFile "${packageFile}"

    # source and validate it

    unset projectName projectVersion projectHasLibraries projectBinaries
    sourceEnvFile "${packageFile}"
    [[ ${projectName} ]] || fail "projectName var required in ${packageFile}"
    [[ ${projectVersion} ]] || fail "projectVersion var required in ${packageFile}"

    if [[ ! ${projectHasLibraries} && ! ${projectBinaries} ]]; then
         fail "either projectHasLibraries or projectBinaries var is required in ${packageFile}"
    fi
}

installProject() {
    [[ ${1} ]] && loadProject "${1}"
    local projectRef="${rayvnConfigPkgDir}/${projectName}"

    if [[ ! -e "${projectRef}" ]]; then

        # Install project link

        ln -s "${projectDir}" "${projectRef}"
        echo "Installed project $(ansi bold "${projectName}") from $(ansi blue ${projectDir})"

        # Install libraries if defined

        if [[ ${projectHasLibraries} == true ]]; then
            local projectLibDir="${projectDir}/lib"
            assertDirectory "${projectLibDir}"
            namespaceRef="${rayvnConfigLibDir}/${projectName}"
            [[ -e ${namespaceRef} ]] && fail "${projectName} already present: ${namespaceRef}"

            # Create namespace link to actual directory

            ln -s "${projectLibDir}" "${namespaceRef}"
            echo "Added shared library root $(ansi blue "${projectLibDir}") as '$(ansi bold "${projectName}")' namespace."
       fi

        # Install binaries if defined

        if declare -p projectBinaries &> /dev/null; then

            local projectBinDir="${projectDir}/bin"
            assertDirectory "${projectBinDir}"

            # Install links for each

            for binary in "${projectBinaries[@]}"; do
                local binarySrc="${projectBinDir}/${binary}"
                assertFileExists "${binarySrc}"
                [[ -x "${binarySrc}" ]] || chmod +x "${binarySrc}"
                local binaryRef="${rayvnConfigBinDir}/${binary}"
                ln -s "${binarySrc}" "${binaryRef}"
                echo "Installed executable $(ansi blue "${binary}")"
           done
        fi
    else
        fail "${projectRef} already installed"
    fi
}

listNamespaces() {
    cd "${rayvnConfigLibDir}" || fail "rayvn not installed!"
    ls -l
}

removeNamespace() {
    [[ -e ${namespaceRef} ]] || fail "${projectName} not found"
    currentNameSpaceDir="$(realpath "${sourceDir}")"
    [[ ${sourceDir} == "${currentNameSpaceDir}" ]] || fail "namespace '${projectName} points elsewhere: ${currentNameSpaceDir}"
    echo "removing '${sourceDir}' as '${projectName}'"
    unlink "${namespaceRef}"
}

runAllTests() {
    local projects projectDir
    if [[ -d ${rayvnConfigPkgDir} ]]; then
        projects=("$(ls -1 ${rayvnConfigPkgDir})")
        for projectDir in "${projects[@]}"; do
            runProjectTests "${rayvnConfigPkgDir}/${projectDir}"
        done
    else
        # not installed, so just run ours.
        declare -d scriptDir
        runProjectTests "${scriptDir}"
    fi
}

runProjectTests() {
    local projectDir="${1}"
    local testDir="${projectDir}/test"
    if [[ -d "${testDir}" ]]; then
        local tests=("$(ls -1 "${testDir}"/test-*.sh)")
        for testFile in "${tests[@]}"; do
            runTest "${projectDir}" "${testFile}"
        done
    fi
}

runTest() {
    local projectDir="${1}"
    local testFile="${2}"
    local projectName=$(basename "${projectDir}")
    assertFileExists "${testFile}"
    local fileName="$(basename ${testFile})"
    local testName="${fileName#test-}"
    echo "About to run ${testFile}"
    testName="${testName%.sh}"
    (
        if [[ -x "${testFile}" ]]; then
            echo
            echo "$(ansi bold ${projectName}) project test: $(ansi cyan ${testName})"
            echo
            if [[ ${projectName} == "rayvn" && ${testName} == "rayvn-init" ]]; then
                # special case
                (
                    env -u PATH bash --norc -c "${testFile}"
                )
            else
                (
                    bash "${testFile}"
                )
            fi
            if [[ ${?} == 0 ]]; then
                echo "$(ansi bold_green PASSED)"
            else
                echo "$(ansi bold_red FAILED)"
            fi
        else
            warn "Skipping ${testFile}: not executable"
        fi
    )
}

reset() {
   rm -rf "${rayvnConfigDir}" || fail
   initHome
}

initHome() {
    if [[ ! -d ${rayvnConfigDir} || ! -f ${rayvnConfigBootFile} ]]; then
        echo
        echo "$(ansi bold Initializing rayvn)"
        echo
        mkdir -p "${rayvnConfigPkgDir}" || fail
        mkdir -p "${rayvnConfigLibDir}" || fail
        mkdir -p "${rayvnConfigBinDir}" || fail

        # generate rayvn.env file   # TODO do we need this content here? Maybe just a placeholder comment for now?
        (
            # Ensure rayvn binaries can be found

            declare -f ensureInPath
            echo
            echo "ensureInPath rayvn ${rayvnConfigBinDir}"

        ) > "${rayvnConfigEnvFile}"

        # generate boot script

        (
            echo "#!/usr/bin/env bash"
            echo
            echo "declare -grx rayvnLibDir=\"\${HOME}/.rayvn/lib\""
            echo "declare -grx rayvnBinDir=\"\${HOME}/.rayvn/bin\""
            echo "declare -gxAi RAYVN_LIBRARIES=()"
            echo
            declare -f require       # print function
            echo
            declare -f _exitRequire  # print function
            echo
            echo "declare -rf require _exitRequire"

        ) > "${rayvnConfigBootFile}"

        # Install rayvn itself

        installProject "${rayvnBinaryHome}"

        # Modify .bashrc to source our env file

        if ! grep "${rayvnConfigEnvFile}" ${bashrcFile} > /dev/null; then
            (
                echo "source ${rayvnConfigEnvFile} # init rayvn environment"

            ) >>"${bashrcFile}"
            echo "Updated $(ansi blue ${HOME}.bashrc) to 'source ${rayvnConfigEnvFile}'"
            # $(ansi bold start a new shell or execute that source command to use rayvn)."
            echo
        fi
    fi
}

require() {
    local qualifiedName="${1}"
    local projectName="${qualifiedName%/*}"
    local libraryName="${qualifiedName#*/}"
    local key="${projectName}_${libraryName}"

    (( RAYVN_LIBRARIES[${projectName}]++ ))

    if [[ ${RAYVN_LIBRARIES[${key}]} ]]; then
        (( RAYVN_LIBRARIES[${key}]++ ))
    else
        local projectDir="${rayvnLibDir}/${projectName}"
        local libraryFile="${projectDir}/${libraryName}.sh"
        [[ -d ${projectDir} ]] || _exitRequire "rayvn project '${projectName}' not found"
        [[ -f ${libraryFile} ]] || _exitRequire "rayvn shared library '${libraryName}' not found at ${libraryFile}"
        #echo "${BASHPID}: BEGIN loading ${libraryFile}" >> /tmp/debug.log
        source "${libraryFile}"
        local initFunction="init_${projectName}_${libraryName}"
        if [[ $(type -t ${initFunction}) == function ]]; then
            #echo "    ${BASHPID}: initializing ${libraryFile}" >> /tmp/debug.log
            ${initFunction}
        fi

        # We've successfully loaded the library, so set the initial count

        RAYVN_LIBRARIES[${key}]=1

        # Ensure ${projectName}_HOME is set so libraries can reference their own dirs
        # and test whether any libraries

        local homeVar="${projectName^^}_HOME"
        if [[ ! ${homeVar} ]]; then
            local homeDir="$(realpath ${projectDir}/..)"
            declare -grx ${homeVar}="${homeDir}"
        fi
    fi
}

_exitRequire() {
    if [[ ${1} ]]; then
        echo "${@}"
        exit 1
    else
        exit 0
    fi
}

ensureInPath() {
    local executable="${1}"
    local executableDir="${2}"
    command -v ${executable} &> /dev/null || declare -gx PATH="${PATH:+$PATH:}${executableDir}"
}

# createProjectFile test bob/test robert robert@foo.com ${HOME}/dev/rayvn-registry
createProjectFile() {
    local projectName="${1}"
    local projectRepo="${2}"
    local adminName="${3}"
    local adminEmail="${4}"
    local registryRepoDir="${5}"
    local projectsDir="${registryRepoDir}/projects"
    local projectFile="${projectsDir}/${projectName}"

    # make sure repo is valid

    if [[ "${projectRepo}" =~ ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
        if ! git ls-remote https://github.com/${projectRepo} &> /dev/null; then
            fail "${projectRepo} not found on GitHub"
        fi
    else
        fail "Invalid GitHub username/repository name: ${projectRepo}"
    fi

    # make sure email is valid

    if [[ ! "${adminEmail}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
        fail "Email address ${adminEmail} is invalid."
    fi

    # make sure the repo directory exists

    [[ -d "${registryRepoDir}" ]] || fail "${registryRepoDir} not found"

    # make sure the projects directory exists

    mkdir -p "${projectsDir}"

    # we're good, so write it out

    (
        echo "# rayvn project registration"
        echo
        echo "project.name = ${projectName}"
        echo "project.repo = ${projectRepo}"
        echo
        echo "admin.name = ${adminName}"
        echo "admin.email = ${adminEmail}"

    ) > "${projectFile}"

    echo
    echo "Created project file ${projectFile}:"
    echo
    cat "${projectFile}"
    echo
}

main "${@}"





