#!/usr/bin/env bash
# shellcheck disable=SC2155

# shellcheck disable=SC2120
usage() {
    echo
    echo "$(ansi bold Manage shared bash libraries and executables)."
    echo
    echo "Usage: $(ansi bold rayvn) COMMAND [PROJECT] [PROJECT...] <options>"
    echo
    echo "Commands"
    echo
    echo "    libraries         List libraries."
    echo "    functions         List public functions."
    echo "    test              Run tests."
    echo "    dependencies      Assert that dependencies are satisfied."
    echo "    release           Create a new release."
    echo
    echo "Use COMMAND --help for any additional details. PROJECT defaults to 'rayvn' if not specified."
    echo
    echo "Options:"
    echo
    echo "    -h, --help        Print this help message and exit."
    echo "    -v                Print the version and exit."
    echo "    --version         Print the version plus release date and exit."
    echo
    bye "${@}"
}

main() {
    init "${@}"
    ${command} "${args[@]}"
    echo
}

init() {
    declare -g debugOptions=
    declare -g command=
    declare -g projects=()
    declare -g args=()
    declare -g gitHubRepo
    declare -gAi flags=()
    upOptions=()

    # process arguments

    case "${1}" in
        test) parseArgs runTests "${@:2}" ;;
        libraries) parseArgs listLibraries "${@:2}" ;;
        functions) parseArgs listFunctions "${@:2}" ;;
        dependencies) parseArgs projectDependencies "${@:2}" ;;
        release) parseArgs releaseProject "${@:2}" ;;
        -v) printVersion; exit 0 ;;
        --version) printVersion true; exit 0 ;;
        -h | --help | help) command='usage' ;;
        -*) command='usage'; args=("Unknown option:" "${1}") ;;
        *) command='usage'; args=("Unknown command:" "${1}") ;;
    esac

    # Boot rayvn, adding any additional projects, then load core and debug
    source rayvn.up ${upOptions[*]} 'rayvn/core' 'rayvn/debug'

    [[ -n ${command} ]] || usage
    [[ -n ${debugOptions} ]] && setDebug ${debugOptions}

    debug "command: ${command} ${args[*]}"
}

SECTION="--+-+-----+-++(-++(---++++(---+( ARGUMENT PARSING )+---)++++---)++-)++-+------+-+--"

parseArgs() {
    command="${1}"
    shift
    while (( ${#} > 0 )); do
        case "${1}" in
            -h | --help) flags+=(['help']=1) ;;
            -q | --quiet) flags+=(['quiet']=1) ;;
            --assert) flags+=(['assert']=1) ;;
            --debug) debugOptions='showOnExit' ;;
            --debug-new) debugOptions='clearLog showOnExit' ;;
            --debug-out) debugOptions='noLog' ;;
            --repo) shift; gitHubRepo="${1}";;
            -*) args+=("${1}") ;;
            *) addIfRayvnExecutable "${1}" || args+=("${1}") ;;
        esac
        shift
    done
}

addIfRayvnExecutable() {
    local name="${1}"
    local path root rayvnPkgFile
    path="$(which "${name}")"
    if [[ -n "${path}" ]]; then

        # Get root directory

        path="$(realpath "${path}")"
        path="${path%/}"  # normalize trailing slash
        path="${path%/*}" # strip last component
        root="${path%/*}" # and again to reach root

        # See if there is a rayvn.pkg file

        rayvnPkgFile="${root}/rayvn.pkg"
        if [[ -f ${rayvnPkgFile} ]]; then
            addProject "${name}=${root}"
            return 0
        fi
    fi
    return 1
}

addProject() {
    local projectName="${1%%=*}"
    local project="${1}"
    projects+=("${projectName}")
    [[ ${projectName} == rayvn ]] && return 0
    upOptions+=("--add ${project}")
}

assertSingleProject() {
    (( ${#projects[@]} > 1 )) && fail "only one project name is supported"
}

ensureAtFront() {
    local -n arrayRef="${1}"
    local first="${2}"
    local newArray=("${first}")
    declare -i seen=0

    for element in "${arrayRef[@]}"; do
        if [[ "${element}" == "${first}" ]] && (( ! seen )); then
            seen=1
        else
            newArray+=("${element}")
        fi
    done

    arrayRef=("${newArray[@]}")
}

SECTION="--+-+-----+-++(-++(---++++(---+( COMMANDS )+---)++++---)++-)++-+------+-+--"

printUsage() {
    usage
}

projectDependencies() {
    if (( flags['help'] )); then
        echo "rayvn dependencies [PROJECT] [--assert] [-q | --quiet]"
    else
        require 'rayvn/dependencies'
        ensureAtFront projects rayvn
        if (( flags['assert'] )); then
            assertProjectDependencies projects flags['quiet']
        else
            listProjectDependencies projects flags['quiet']
        fi
    fi
}

releaseProject() {
    if (( flags['help'] )); then
        echo "rayvn release [PROJECT | --repo 'my-account/my-repo'] VERSION "
    else
        local version=
        if (( ${#projects[@]} )); then
            assertSingleProject
            version="${args[0]}"
        elif (( ${#args[@]} == 1 )); then
            projects=(rayvn)
            version="${args[0]}"
        else
            projects=("${args[0]}")
            version="${args[1]}"
        fi

        [[ -n ${version} ]] || fail "version required"

        local ghRepo="${gitHubRepo}"
        if [[ -z ${ghRepo} ]]; then
            local project="${projects[0]}"
            case "${project}" in
                rayvn) ghRepo='phoggy/rayvn' ;;
                valt) ghRepo='phoggy/valt' ;;
                wardn) ghRepo='phoggy/wardn' ;;
                *) fail "Please specify project using GitHub repo format: --repo 'my-account/my-repo'."
            esac
        fi

        require 'rayvn/release'
        release "${ghRepo}" "${version}"
    fi
}

runTests() {
    if (( flags['help'] )); then
        echo "rayvn test [PROJECT]"
    else
        require 'rayvn/spinner'
        local testLogDir="$(configDirPath tests)" || fail
        ensureDir "${testLogDir}" || fail
        rm "${testLogDir:?}"/* 2> /dev/null
        (( ${#projects[@]} )) || projects+=(rayvn)
        forEachProject runProjectTests
    fi
}

forEachProject() {
    local command="${1}"
    local args=("${@:2}")
    local projectRoot
    for project in "${projects[@]}"; do
        projectRoot="${_rayvnProjects[${project}::project]}"
        "${command}" "${project}" "${projectRoot}" "${args}"
    done
}

forEachLibrary() {
    local project="${1}"
    local command="${2}"
    local args=("${@:3}")
    local libraryRoot="${_rayvnProjects[${project}::library]}"
    [[ -n ${libraryRoot} ]] || fail "no libraries found for '${project}' project"
    for file in "${libraryRoot}"/*.sh; do
        [[ -e ${file} ]] || fail "no libraries found for '${project}' at ${libraryRoot}"
        local fileName="$(basename "${file}")"
        local library="${fileName%.*}"
        "${command}" "${project}" "${library}" "${file}" "${args}"
    done
}

printVersion() {
    local verbose="${1:-}"
    if ! declare -p _rayvnProjects &> /dev/null; then
        source rayvn.up 'rayvn/core'
    fi
    projectVersion rayvn "${verbose}"
}

_printLibrary() {
    local projectName="${1}"
    local libraryName="${2}"
    local libraryRoot="${3}"
    echo "${projectName}/${libraryName} -> ${libraryRoot}"
}

runProjectTests() {
    local project="${1}"
    local projectRoot="${2}"
    local testDir="${projectRoot}/test"
    if [[ -d "${testDir}" ]]; then
        pushd "${testDir}" &> /dev/null
        local testFiles=(test-*.sh)
        popd &> /dev/null
        sortArrayLongestFirst testFiles
        declare -i maxLength=$(( $? -8 ))
        for testFile in "${testFiles[@]}"; do
            runTest "${projectRoot}" "${testDir}/${testFile}" ${maxLength}
        done
    else
        echo "$(ansi bold ${project}) (no tests)"
    fi
}

padSpaces() {
    local count="${1:-0}"
    (( count > 0 )) && printf '%*s' "${count}" ''
}

runTest() {
    local projectDir="${1}"
    local testFile="${2}"
    declare -i maxTestNameLength=${3}
    local projectName=$(basename "${projectDir}")
    assertFileExists "${testFile}"
    local fileName="$(basename ${testFile})"
    local testName="${fileName#test-}"
    testName="${testName%.sh}"
    local testLogFileName="${projectName}-${testName}.log"
    local testLogFile="${testLogDir}/${testLogFileName}"

    local status="$(ansi bold ${projectName}) test $(ansi cyan ${testName})"
    local padLength=$(( ${maxTestNameLength} - ${#testName} ))

    echo -n "${status}"

    (
        if [[ -x "${testFile}" ]]; then
            startSpinner || fail
            if [[ ${projectName} == "rayvn" && ${testName} == "rayvn-up" ]]; then
                (
                    # debugEnvironment "rayvn env, prior to running ${testFile}" "rayvn-subshell"

                    # We must create special conditions for this test so that the process it runs in does
                    # NOT contain any functions from this process (esp. rayvn.up and core.sh) and that all
                    # rayvn variables are excluded.
                    #
                    # These preconditions for the test are required so that rayvn init acts exactly as it
                    # would the first time a user invokes it.

                    # First, collect the names of all existing vars whose names start with 'rayvn', ignoring case so
                    # we can remove them.

                    local removeVars var
                    for var in $(compgen -v | grep -i 'rayvn'); do
                        removeVars+="-u ${var} "
                    done

                    # Second, export var pointing to the current rayvnHome and binary

                    export rayvnInstallHome="${rayvnHome}"
                    export rayvnInstallBinary="${rayvnHome}/bin/rayvn"
                    removeVars+="-u rayvnHome"

                    # Third, export a list of the function names within the test itself so
                    # that it can ensure that no other functions are present, e.g. require

                    export testFunctionNames=$(grep -E '^\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\(\)' "${testFile}" | \
                            awk '{gsub(/\(\)/, "", $1); printf "%s ", $1}')
                    testFunctionNames="${testFunctionNames%" "}"

                    # Log vars if in debug mode

                    # TODO: only works if library loaded, so add a flag to
                    #  debugVars removeVars rayvnInstallHome rayvnInstallBinary testFunctionNames testFile SHELL

                    # Don't add an empty line at exit

                    declare -grx _noEchoOnExit=1

                    # Finally, run the test without functions or rayvn vars in its env, and without sourcing
                    # any init files.

                    env ${removeVars} ${SHELL} --noprofile --norc -c "${testFile}"

                ) &> "${testLogFile}"

            else
                (
                    "${SHELL}" "${testFile}"
                ) &> "${testLogFile}"
            fi

            declare -i result="${?}"
            stopSpinner || fail
            padSpaces ${padLength}
            if (( ${result} == 0 )); then
                echo " ${_greenCheckMark} $(ansi dim log at ${testLogFile})"
            else
                echo " ${_redCrossMark} $(ansi dim log at ${testLogFile})"
            fi
        else
            warn "Skipping ${testFile}: not executable"
        fi
    )
}

sortArrayLongestFirst() {
    local -n arrayRef="${1}"
    IFS=$'\n' arrayRef=($(printf "%s\n" "${arrayRef[@]}" | sort -r -n -k1,1 --key=1.1,1.1 --key=1.1,1.1 | awk '{ print length, $0 }' | sort -r -n | cut -d' ' -f2-))
    IFS=' '

    if (( ${#arrayRef[@]} > 0 )); then
        return "${#arrayRef[0]}"
    else
         return 0
    fi
}


printFunction() {
    local key="${1}"
    printf "%s() {\n%s\n" "${name}" "$(declare -f "${name}" | tail -n +3)"
}


ensureInPath() {
    local executable="${1}"
    local executableDir="${2}"
    command -v ${executable} &> /dev/null || declare -gx PATH="${PATH:+$PATH:}${executableDir}"
}

# createProjectFile test bob/test robert robert@foo.com ${HOME}/dev/rayvn-registry
createProjectFile() {
    local projectName="${1}"
    local projectRepo="${2}"
    local adminName="${3}"
    local adminEmail="${4}"
    local registryRepoDir="${5}"
    local projectsDir="${registryRepoDir}/projects"
    local projectFile="${projectsDir}/${projectName}"

    # make sure repo is valid

    if [[ "${projectRepo}" =~ ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
        if ! git ls-remote https://github.com/${projectRepo} &> /dev/null; then
            fail "${projectRepo} not found on GitHub"
        fi
    else
        fail "Invalid GitHub username/repository name: ${projectRepo}"
    fi

    # make sure email is valid

    if [[ ! "${adminEmail}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
        fail "Email address ${adminEmail} is invalid."
    fi

    # make sure the repo directory exists

    [[ -d "${registryRepoDir}" ]] || fail "${registryRepoDir} not found"

    # make sure the projects directory exists

    mkdir -p "${projectsDir}"

    # we're good, so write it out

    (
        echo "# rayvn project registration"
        echo
        echo "project.name = ${projectName}"
        echo "project.repo = ${projectRepo}"
        echo
        echo "admin.name = ${adminName}"
        echo "admin.email = ${adminEmail}"

    ) > "${projectFile}"

    echo
    echo "Created project file ${projectFile}:"
    echo
    cat "${projectFile}"
    echo
}

main "${@}"
