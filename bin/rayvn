#!/usr/bin/env bash
# shellcheck disable=SC2155

# shellcheck disable=SC2120
usage() {
    echo
    echo "$(ansi bold Manage shared bash libraries and executables)."
    echo
    echo "Usage: $(ansi bold rayvn) COMMAND [PROJECT] [PROJECT...] <options>"
    echo
    echo "Commands"
    echo
    echo "    new TYPE NAME     Create a new project/script/library with the specified NAME."
    echo "    libraries         List libraries."
    echo "    functions         List public functions."
    echo "    test              Run tests."
    echo "    dependencies      Assert that dependencies are satisfied."
    echo "    release           Create a new release."
    echo
    echo "Use COMMAND --help for any additional details. PROJECT defaults to 'rayvn' if not specified."
    echo
    echo "Options:"
    echo
    echo "    -h, --help        Print this help message and exit."
    echo "    -v                Print the version and exit."
    echo "    --version         Print the version with release date and exit."
    echo
    bye "${@}"
}

main() {
    init "${@}"
    ${command} "${args[*]}"
    echo
}

init() {
    declare -g debugOptions=
    declare -g command=
    declare -g projects=()
    declare -g args=()
    declare -g gitHubRepo
    declare -gAi flags=()
    upOptions=()

    # process arguments

    case "${1}" in
        new | create) parseArgs create "${@:2}" ;;
        test) parseArgs runTests "${@:2}" ;;
        projects) parseArgs listProjects "${@:2}" ;;
        libraries) parseArgs listLibraries "${@:2}" ;;
        functions) parseArgs listFunctions "${@:2}" ;;
        dependencies) parseArgs projectDependencies "${@:2}" ;;
        release) parseArgs releaseProject "${@:2}" ;;
        -v) printVersion; exit 0 ;;
        --version) printVersion true; exit 0 ;;
        -h | --help | help) command='usage' ;;
        -*) command='usage'; args=("Unknown option:" "${1}") ;;
        *) command='usage'; args=("Unknown command:" "${1}") ;;
    esac

    # Boot rayvn, adding any additional projects, then load core
    source rayvn.up ${upOptions[*]} 'rayvn/core'

    [[ -n ${command} ]] || usage
    [[ -n ${debugOptions} ]] && setDebug ${debugOptions}
}

SECTION="--+-+-----+-++(-++(---++++(---+( ARGUMENT PARSING )+---)++++---)++-)++-+------+-+--"

parseArgs() {
    command="${1}"
    shift
    while (( ${#} > 0 )); do
        case "${1}" in
            -h | --help) flags+=(['help']=1) ;;
            -q | --quiet) flags+=(['quiet']=1) ;;
            --assert) flags+=(['assert']=1) ;;
            --debug) debugOptions='showOnExit' ;;
            --debug-new) debugOptions='clearLog showOnExit' ;;
            --debug-out) debugOptions="tty ${terminal}" ;;
            --debug-tty) shift; debugOptions="tty ${1}" ;;
            --repo) shift; gitHubRepo="${1}";;
            -*) args+=("${1}") ;;
            *) addIfRayvnExecutable "${1}" || args+=("${1}") ;;
        esac
        shift
    done
}

addIfRayvnExecutable() {
    [[ ${command} == 'create' ]] && return 1
    local name="${1}"
    local path root rayvnPkgFile
    path="$(which "${name}")"
    if [[ -n "${path}" ]]; then

        # Get root directory

        path="$(realpath "${path}")"
        path="${path%/}"  # normalize trailing slash
        path="${path%/*}" # strip last component
        root="${path%/*}" # and again to reach root

        # See if there is a rayvn.pkg file

        rayvnPkgFile="${root}/rayvn.pkg"
        if [[ -f ${rayvnPkgFile} ]]; then
            addProject "${name}=${root}"
            return 0
        fi
    fi
    return 1
}

addProject() {
    local projectName="${1%%=*}"
    local project="${1}"
    projects+=("${projectName}")
    [[ ${projectName} == rayvn ]] && return 0
    upOptions+=("--add ${project}")
}

assertSingleProject() {
    (( ${#projects[@]} > 1 )) && fail "only one project name is supported"
}

ensureAtFront() {
    local -n arrayRef="${1}"
    local first="${2}"
    local newArray=("${first}")
    declare -i seen=0

    for element in "${arrayRef[@]}"; do
        if [[ "${element}" == "${first}" ]] && (( ! seen )); then
            seen=1
        else
            newArray+=("${element}")
        fi
    done

    arrayRef=("${newArray[@]}")
}

SECTION="--+-+-----+-++(-++(---++++(---+( COMMANDS )+---)++++---)++-)++-+------+-+--"

printUsage() {
    usage
}

create() {
    if (( flags['help'] )); then
        echo "rayvn new project|script|library NAME"
    else
        local type=${args[0]}
        local name=${args[1]}
        local command=
        [[ -n "${type}" ]] || bye "one of 'project', 'script' or 'library' required"
        case ${type} in
            project | script | library) ;;
            *) bye "unknown type: ${type}"
        esac
        [[ -n "${name}" ]] || bye "name required"
        local gitRoot=$(git rev-parse --show-toplevel 2>/dev/null) || gitRoot=''
        local templateDir="${rayvnHome}/templates"
        args=("${args[@]:3}")

        case ${type} in
            project) createProject;;
            script) createScript ;;
            library) createLibrary ;;
        esac
    fi
}

projectDependencies() {
    if (( flags['help'] )); then
        echo "rayvn dependencies [PROJECT] [--assert] [-q | --quiet]"
    else
        require 'rayvn/dependencies'
        ensureAtFront projects rayvn
        if (( flags['assert'] )); then
            assertProjectDependencies projects flags['quiet']
        else
            listProjectDependencies projects flags['quiet']
        fi
    fi
}

releaseProject() {
    if (( flags['help'] )); then
        echo "rayvn release [PROJECT | --repo 'my-account/my-repo'] VERSION "
    else
        local version=
        if (( ${#projects[@]} )); then
            assertSingleProject
            version="${args[0]}"
        elif (( ${#args[@]} == 1 )); then
            projects=(rayvn)
            version="${args[0]}"
        else
            projects=("${args[0]}")
            version="${args[1]}"
        fi

        [[ -n ${version} ]] || fail "version required"

        local ghRepo="${gitHubRepo}"
        if [[ -z ${ghRepo} ]]; then
            local project="${projects[0]}"
            case "${project}" in
                rayvn) ghRepo='phoggy/rayvn' ;;
                valt) ghRepo='phoggy/valt' ;;
                wardn) ghRepo='phoggy/wardn' ;;
                *) fail "Please specify project using GitHub repo format: --repo 'my-account/my-repo'."
            esac
        fi

        require 'rayvn/release'
        release "${ghRepo}" "${version}"
    fi
}

runTests() {
    if (( flags['help'] )); then
        echo "rayvn test [PROJECT] [TEST-NAME]"
    else
        require 'rayvn/spinner'
        local testLogDir="$(configDirPath tests)" || fail
        ensureDir "${testLogDir}" || fail
        rm "${testLogDir:?}"/* 2> /dev/null
        (( ${#projects[@]} )) || projects+=(rayvn)
        forEachProject runProjectTests
    fi
}

listProjects() {
    forEachProject _printProject "${args[@]}"
}

_printProject() {
    local projectName="${1}"
    local projectRoot="${2}"
    echo "project '${projectName}' -> ${projectRoot}"
}

listLibraries() {
    forEachProject _printLibraries "${1}"
}

_printLibraries() {
    local project="${1}"
    echo "project '${project}'"
    forEachLibrary "${project}" _printProjectLibrary
}

_printProjectLibrary() {
    local library="${2}"
    local file="${3}"
    echo "    ${library} -> ${file}"
}

listFunctions() {
    local sourceName
    local functions=()
    local function
    for sourceName in "${_rayvnSources[@]}"; do
        echo
        echo "${sourceName} functions"
        echo
        getFunctions functions "${sourceName}"
        functions=($(printf '%s\n' "${functions[@]}" | sort))
        for function in "${functions[@]}"; do
            if declare -pF "${functionName}" 2> /dev/null | grep -q "declare -fr"; then
                echo "    ${function}"
            else
                echo "    ${function} [NOT READONLY!]"
            fi
        done
        functions=()
    done
}

getFunctions() {
    local -n arrayRef="${1}"
    local filter="${2:-''}"
    local applyFilter=${ [[ ${filter} == '' ]] && echo 0 || echo 1; }
    local source
    for functionName in "${!_rayvnFunctionSources[@]}"; do
        source="${_rayvnFunctionSources[${functionName}]}"
        if (( applyFilter )); then
            if [[ ${source} == "${filter}" ]]; then
                arrayRef+=("${functionName}")
            fi
        else
            arrayRef+=("${functionName}")
        fi
    done
}

forEachProject() {              # TODO: this pattern is a pain. Replace with getProjects()
    local command="${1}"
    local arguments=("${@:2}")
    local projectRoot
    for project in "${!_rayvnProjects[@]}"; do
        if [[ "${project}" == *"::project"  ]]; then
            project="${project%::project}"
            projectRoot="${_rayvnProjects[${project}::project]}"
            "${command}" "${project}" "${projectRoot}" "${arguments}"
        fi
    done
}

forEachLibrary() {              # TODO: this pattern is a pain. Replace with getLibraries() with optional project filter.
    local project="${1}"
    local command="${2}"
    local arguments=("${@:3}")
    local libraryRoot="${_rayvnProjects[${project}::library]}"
    [[ -n ${libraryRoot} ]] || fail "no libraries found for '${project}' project"
    for file in "${libraryRoot}"/*.sh; do
        [[ -e ${file} ]] || fail "no libraries found for '${project}' at ${libraryRoot}"
        local fileName="$(basename "${file}")"
        local library="${fileName%.*}"
        "${command}" "${project}" "${library}" "${file}" "${arguments}"
    done
}

printVersion() {
    local verbose="${1:-}"
    if ! declare -p _rayvnProjects &> /dev/null; then
        source rayvn.up 'rayvn/core'
    fi
    projectVersion rayvn "${verbose}"
}

_printLibrary() {
    local projectName="${1}"
    local libraryName="${2}"
    local libraryRoot="${3}"
    echo "${projectName}/${libraryName} -> ${libraryRoot}"
}

runProjectTests() {
    local project="${1}"
    local projectRoot="${2}"
    local testDir="${projectRoot}/test"
    local testName testFile descriptor

    if [[ -d "${testDir}" ]]; then
        pushd "${testDir}" &> /dev/null
        local testFiles=()
        if (( ${#args[@]} > 0 )); then
            for testName in "${args[@]}"; do
                testFile="test-${testName}.sh"
                [[ -f "${testFile}" ]] && testFiles+=("${testFile}")
            done
            descriptor="matching "
        else
            testFiles=(test-*.sh)
        fi
        popd &> /dev/null
        if (( ${#testFiles[@]} > 0 )); then
            sortArrayLongestFirst testFiles
            declare -i maxLength=$(( $? -8 ))
            for testFile in "${testFiles[@]}"; do
                runTest "${projectRoot}" "${testDir}/${testFile}" ${maxLength}
            done
        else
            echo "$(ansi bold ${project}) (no ${descriptor}tests found)"
        fi
    else
        echo "$(ansi bold ${project}) (no tests)"
    fi
}

padSpaces() {
    local count="${1:-0}"
    (( count > 0 )) && printf '%*s' "${count}" ''
}

runTest() {
    local projectDir="${1}"
    local testFile="${2}"
    declare -i maxTestNameLength=${3}
    local projectName=$(basename "${projectDir}")
    assertFileExists "${testFile}"
    local fileName="$(basename ${testFile})"
    local testName="${fileName#test-}"
    testName="${testName%.sh}"
    local testLogFileName="${projectName}-${testName}.log"
    local testLogFile="${testLogDir}/${testLogFileName}"

    local status="$(ansi bold ${projectName}) test $(ansi cyan ${testName})"
    local padLength=$(( ${maxTestNameLength} - ${#testName} ))

    echo -n "${status}"

    (
        if [[ -x "${testFile}" ]]; then
            startSpinner || fail
            if [[ ${projectName} == "rayvn" && ${testName} == "rayvn-up" ]]; then
                (
                    # We must create special conditions for this test so that the process it runs in does
                    # NOT contain any functions from this process (esp. rayvn.up and core.sh) and that all
                    # rayvn variables are excluded.
                    #
                    # These preconditions for the test are required so that rayvn init acts exactly as it
                    # would the first time a user invokes it.

                    #    debugEnvironment "rayvn-up-before-env"

                    # First, collect the names of all existing vars whose names start with 'rayvn', ignoring case so
                    # we can remove them.

                    local removeVars var
                    for var in $(compgen -v | grep -i 'rayvn'); do
                        removeVars+="-u ${var} "
                    done

                    # Second, export var pointing to the current rayvnHome and binary

                    export rayvnInstallHome="${rayvnHome}"
                    export rayvnInstallBinary="${rayvnHome}/bin/rayvn"
                    removeVars+="-u rayvnHome"

                    # Third, export a list of the function names within the test itself so
                    # that it can ensure that no other functions are present, e.g. require

                    export testFunctionNames=$(grep -E '^\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\(\)' "${testFile}" | \
                            awk '{gsub(/\(\)/, "", $1); printf "%s ", $1}')
                    testFunctionNames="${testFunctionNames%" "}"

                    # Log vars if in debug mode

                 #   debugVar removeVars rayvnInstallHome rayvnInstallBinary testFunctionNames testFile SHELL

                    # Don't add an empty line at exit

                    declare -grx _noEchoOnExit=1

                    # Finally, run the test without functions or rayvn vars in its env, and without sourcing
                    # any init files.

                    env ${removeVars} ${SHELL} --noprofile --norc -c "${testFile}"
                ) &> "${testLogFile}"

            else
                (
                    "${SHELL}" "${testFile}"
                ) &> "${testLogFile}"
            fi

            declare testResult="${?}"
            stopSpinner
            padSpaces ${padLength}
            if (( ${testResult} == 0 )); then
                echo " ${_greenCheckMark} $(ansi dim log at ${testLogFile})"
            else
                echo " ${_redCrossMark} $(ansi dim log at ${testLogFile})"
            fi
        else
            warn "Skipping ${testFile}: not executable"
        fi
    )
}

sortArrayLongestFirst() {
    local -n arrayRef="${1}"
    IFS=$'\n' arrayRef=($(printf "%s\n" "${arrayRef[@]}" | sort -r -n -k1,1 --key=1.1,1.1 --key=1.1,1.1 | awk '{ print length, $0 }' | sort -r -n | cut -d' ' -f2-))
    IFS=' '

    if (( ${#arrayRef[@]} > 0 )); then
        return "${#arrayRef[0]}"
    else
         return 0
    fi
}

createProject() {
    [[ "${name}" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]] || fail "sorry, '${name}' is not a valid bash identifier"
    [[ -n ${gitRoot} ]] && fail "${PWD} is within an existing project/git repo"
    local projectRoot="${PWD}/${name}"
    assertFileDoesNotExist "${projectRoot}"
    local binDir="${projectRoot}/bin"
    local libDir="${projectRoot}/lib"
    local packageTemplate="${templateDir}/package-template.sh"
    local scriptTemplate="${templateDir}/script-template.sh"
    local libraryTemplate="${templateDir}/library-template.sh"

    echo
    echo "$(ansi bold Creating project "'${name}'" in) $(ansi blue "'${PWD}'")"
    echo

    require 'rayvn/prompt'

    declare -i createdRepo=0
    local answer
    confirm "Create new GitHub repo?" y n answer || bye
    if [[ "${answer}" == "y" ]]; then
        if ! gh auth status --active &> /dev/null; then
            confirm "Need to authenticate. Do you have a GitHub account?" y n answer || bye
            if [[ "${answer}" == "y" ]]; then
                gh auth login || exit
            else
                bye "Please go to https://github.com/ and create an account first."
            fi
        fi
        gh repo create "${name}" --add-readme --private --clone || fail
        createdRepo=1
        cd "${projectRoot}" || fail
    else
        makeDir "${projectRoot}" > /dev/null
        cd "${projectRoot}" || fail
        git init --initial-branch=main || fail
    fi
    makeDir "${binDir}" > /dev/null
    makeDir "${libDir}" > /dev/null

    # Ok, directories are ready, copy and substitute files

    local projectName="${name}"
    local quotedName="'${name}'"
    local qualifiedName="'${name}/example'"
    local rayvnVersion="'$(projectVersion rayvn | cut -d' ' -f2)'"
    local libraryCall='myExampleLibraryFunction'
    local libraryName="example"
    local libraryNameInitialCap="Example"

    substituteVars "${packageTemplate}" './rayvn.pkg' quotedName rayvnVersion || fail
    substituteVars "${libraryTemplate}" './lib/example.sh' projectName quotedName qualifiedName libraryName libraryNameInitialCap || fail
    substituteVars "${scriptTemplate}" "./bin/${name}" quotedName qualifiedName libraryCall || fail
    chmod +x "./bin/${name}" || fail

    # Add and commit

    git add --all
    git commit -m "initial commit"

    # And push if we created the repo

    if (( createdRepo )); then
        git push -u origin main || fail
        echo "New project files pushed."
        echo
    else
        echo
        echo "$(ansi bold Once you create a repo on GitHub, use the following commands to push it):"
        echo
        echo "   git remote add origin https://github.com/YOUR_USER_NAME/${name}.git"
        echo "   git push -u origin main"
        echo
    fi
    remindIfNotInPath "${binDir}"
}

remindIfNotInPath() {
    local binDir="${1}"
    if [[ ! ":${PATH}:" == *":${binDir}:"* ]]; then
        echo "Remember to add $(ansi blue ${binDir}) to your PATH."
    fi
}

createScript() {
    local projectRoot projectName
    local templateFile="${templateDir}/script-template.sh"
    getProjectRoot projectRoot projectName

    local binDir="${projectRoot}/bin"
    local scriptFile="${binDir}/${name}"
    ensureDir "${binDir}"
    assertFileDoesNotExist "${scriptFile}"

    local quotedName="'${projectName}'"
    local qualifiedName=
    local libraryCall='# ...'
    substituteVars "${templateFile}" "${scriptFile}" quotedName qualifiedName libraryCall || fail

    chmod +x "${scriptFile}" || fail
    git add "${scriptFile}" || fail

    echo "Created $(ansi blue bin/${name})"
    remindIfNotInPath "${binDir}"
}

createLibrary() {
    local projectRoot projectName
    local templateFile="${templateDir}/library-template.sh"
    getProjectRoot projectRoot projectName

    local libDir="${projectRoot}/lib"
    local libraryFile="${libDir}/${name}.sh"
    ensureDir "${libDir}"
    assertFileDoesNotExist "${libraryFile}"

    local quotedName="'${projectName}'"
    local qualifiedName="'${projectName}/${name}'"
    local libraryName="${name^}"

    substituteVars "${templateFile}" "${libraryFile}" quotedName qualifiedName projectName name libraryName || fail

    git add "${libraryFile}" || fail

    echo "Created $(ansi blue lib/${name}.sh)"
}

getProjectRoot() {
    local -n projectRootRef="${1}"
    local -n projectNameRef="${2}"

    [[ -n ${gitRoot} ]] || bye "${PWD} is not within a project/git repo"
    local _projectRoot="${gitRoot}"
    local packageFile="${_projectRoot}/rayvn.pkg"
    [[ -f "${packageFile}" ]] || bye "${_projectRoot} does not appear to be a rayvn project: no rayvn.pkg file"
    local _projectName="$(baseName ${_projectRoot})"
    projectRootRef="${_projectRoot}"
    projectNameRef="${_projectName}"
}

substituteVars() {
    local inputFile=${1}
    local outputFile=${2}
    local varList=("${@:3}")

    [[ -z ${inputFile} || -z ${outputFile} || ${#varList[@]} -eq 0 ]] &&
        fail "Usage: substituteVars inputFile outputFile <varName> [<varName> ...]"

    local sedExprs=()
    for varName in "${varList[@]}"; do
        local value=${!varName}
        # Escape for sed: backslash, ampersand, and delimiter /
        value=${value//\\/\\\\}
        value=${value//&/\\&}
        value=${value//\//\\/}
        sedExprs+=("-e" "s/\${${varName}}/${value}/g")
    done

    sed "${sedExprs[@]}" "${inputFile}" > "${outputFile}"
}

main "${@}"
