#!/usr/bin/env bash
# shellcheck disable=SC2317,SC1090

# Bootstrap rayvn shared library system.
# See https://github.com/phoggy/rayvn for details.

# TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
# Copy some of the refactorings from rayvn.up.bak, EXCLUDING anything trying to
# deal with recursion.
#
# Test if recursion ever actually happens now.
# If does NOT: use simple before->source->after collection to determine new functions and remember owner or COLLIDE
#
# If DOES: consider keeping a global _rayvnBeforeSourceFunctionNames ARRAY which must be initially empty. On recursion,
# the 'before' collection will see that this var is not empty and can diff/remember (also need _rayvnBeforeQualifiedName!)
#
# TODO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

require() {
     while (( ${#} > 0 )); do
        local qualifiedName="${1}"
        local projectName="${qualifiedName%/*}"
        local libraryName="${qualifiedName#*/}"
        local libraryKey="${projectName}_${libraryName}"

        # Keep a count of requests for the project and library

        (( _rayvnRequireCounts["${projectName}"]+=1 )) # under errexit, using ++ fails but +=1 does not
        (( _rayvnRequireCounts["${libraryKey}"]+=1 ))

        # Have we previously loaded this library?

        if (( _rayvnRequireCounts[${libraryKey}] == 1 )); then

            # Nope, validate the request

            local libraryRootKey="${projectName}${_libraryRootSuffix}"
            local libraryRoot="${_rayvnProjects[${libraryRootKey}]}"
            [[ ${libraryRoot} ]] || fail "require '${qualifiedName}': no library root configured for rayvn project '${projectName}'"

            local libraryFile="${libraryRoot}/${libraryName}.sh"
            [[ -f ${libraryFile} ]] || fail "rayvn shared library '${qualifiedName}' not found at ${libraryFile}"

            # Load the library. We can recurse here!

            source "${libraryFile}" || fail "failed to load rayvn shared library '${qualifiedName}'"

            # TODO: make all sourced functions readonly so that collisions will cause error??

            # Call its init function, if present

            local initFunction="_init_${projectName}_${libraryName}"
            if [[ $(type -t "${initFunction}") == function ]]; then
                ${initFunction} || fail "${initFunction}() failed"
                unset -f "${initFunction}" # remove it
            fi
        fi
        shift
    done
    return 0
}

# bashsupport disable=BP3002
_configure() {
    declare -gAx _rayvnProjects=()
    declare -gAix _rayvnRequireCounts=()
    declare -grx _projectRootSuffix='::project'
    declare -grx _libraryRootSuffix='::library'
    declare -gx currentProjectName=

    local keySuffix projectName projectRoot key executable path libraryRoot

    addRoot() {
        projectName="${1}"
        keySuffix="${2}"
        projectRoot="${3}"
        key="${projectName}${keySuffix}"

        if  [[ ! -v _rayvnProjects[${key}] ]]; then
            projectRoot="$(realpath "${projectRoot}")" || fail "Could not resolve real path of: ${projectRoot}"
            _rayvnProjects[${key}]="${projectRoot}"

            # Define a ${project}Home var for project self reference
            [[ ${keySuffix} == "${_projectRootSuffix}" ]] && declare -grx "${projectName}Home"="${projectRoot}"
        fi
        return 0
    }

    addProjectFromExecutable() {
        projectName="${1}"
        executable="${2}"
        path="$(type -p "${executable}")" || fail "'${executable}' not found for project '${projectName}'"
        path="$(realpath "${path}")" || fail # handle symlinks, e.g. brew style
        projectRoot="$(dirname "${path}")/.."
        addRoot "${projectName}" "${_projectRootSuffix}" "${projectRoot}"
    }

    addProject() {
        projectName="${1}"
        projectRoot="${2}"

        # Add project root

        if [[ -d ${projectRoot} ]]; then
            addRoot "${projectName}" ${_projectRootSuffix} "${projectRoot}"
        else
            addProjectFromExecutable "${projectName}" "${projectRoot}"
        fi

        # Add library root if it exists

        libraryRoot="${_rayvnProjects[${projectName}${_projectRootSuffix}]}/lib"
        if [[ -d "${libraryRoot}" ]]; then
            addRoot "${projectName}" ${_libraryRootSuffix} "${libraryRoot}"
        fi
    }

    traceOn() {
        [[ -v traceOut ]] || return 1
        [[ -v _traceStarted ]] || echo -e "\n\nBOOT rayvn.up --------- ${ date; } ----------------\n" > "${traceOut}"
        _traceStarted=1
        return 0
    }

    trace() {
        traceOn && echo -e "TRACE: ${*}" > "${traceOut}"
    }

    traceVar() {
        traceOn && declare -p "${@}" > "${traceOut}" 2> /dev/null;
    }

    traceStack() {
        traceOn && printStack "TRACE: ${*}" > "${traceOut}"
    }

    # Add rayvn using *our* path to ensure we do not find a different install.
    # This is important when this file is sourced using a file path.

    local rayvnBinary="${BASH_SOURCE[0]}"
    rayvnBinary="$(realpath ${rayvnBinary}/..)"
    addProject rayvn "$(dirname "${rayvnBinary}")"

    # Now, process arguments in two passes: add projects, then load any required libraries

    local required=()
    local projects=() split=() project name path
    while (( ${#} > 0 )); do
        case "${1}" in
            -a | --add) shift; IFS=',' read -r -a split <<< "${1}"; projects+=("${split[@]}") ;;
            *) required+=("${1}") ;;
        esac
        shift
    done

    for project in "${projects[@]}"; do
        project="${project#"${project%%[![:space:]]*}"}"  # remove leading whitespace
        project="${project%"${project##*[![:space:]]}"}"  # remove trailing whitespace
        name="${project%%=*}"
        path="${project#*=}"
        addProject "${name}" "${path}"
    done

    require "${required[@]}"

    # Lock down the map

    declare -r _rayvnProjects

    # Prevent the require function from being replaced

    declare -rf require

    # Set the project name (not readonly, in case of child rayvn process)

    declare -gx currentProjectName=${ basename "${BASH_SOURCE[2]}"; } || fail

    # Disable and warn if any 'Unofficial Strict Mode' options are set

    if [[ -o errexit || -o pipefail || -o nounset ]]; then
        set +o errexit
        set +o pipefail
        set +o nounset
        echo "errexit, pipefail and nounset have been disabled, see https://www.reddit.com/r/bash/comments/mivbcm/comment/gt8harr/"
    fi
}

# This function will be replaced when rayvn/core is loaded

fail() { printStack "${*}"; exit 1; }

# And so will this one

printStack() {
    [[ -n ${1} ]] && echo -e "${*}\n"
    local caller=${FUNCNAME[1]}
    declare -i start=1
    declare -i depth=${#FUNCNAME[@]}
    local indent='    '
    (( depth - start == 1 )) && indent=''
    [[ ${1} ]] && { echo "${*}"; echo; }
    for ((i = start; i < depth; i++)); do
        echo "${indent}${FUNCNAME[${i}]} ${BASH_SOURCE[${i}]}:${BASH_LINENO[${i} - 1]} -> ${FUNCNAME[${i} - 1]}()"
    done
}

# Configure and then remove the function.

_configure "${@}"; unset _configure
