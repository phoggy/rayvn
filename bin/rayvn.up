#!/usr/bin/env bash
# shellcheck disable=SC2317,SC1090

# Bootstrap rayvn shared library system.
# See https://github.com/phoggy/rayvn for details.

declare -grx rayvnPkgFileName='rayvn.pkg'

declare -gxA _rayvnProjects=()
declare -grx _projectRootSuffix='::project'
declare -grx _libraryRootSuffix='::library'
declare -grx _versionSuffix='::version'
declare -grx _releaseDateSuffix='::release-date'
declare -gxAi _rayvnRequireCounts=()

require() {
     while (( ${#} > 0 )); do
        local qualifiedName="${1}"
        local projectName="${qualifiedName%/*}"
        local libraryName="${qualifiedName#*/}"
        local libraryKey="${projectName}_${libraryName}"

        # Keep a count of requests for this project

        (( _rayvnRequireCounts[${projectName}]++ ))

        # Have we previously loaded this library?

        if [[ ! ${_rayvnRequireCounts[${libraryKey}]} ]]; then

            # Nope, validate the request

            local libraryRootKey="${projectName}${_libraryRootSuffix}"
            local libraryRoot="${_rayvnProjects[${libraryRootKey}]}"
            [[ ${libraryRoot} ]] || fail "no libraries configured for rayvn project '${projectName}'"

            local libraryFile="${libraryRoot}/${libraryName}.sh"
            [[ -f ${libraryFile} ]] || fail "rayvn shared library '${qualifiedName}' not found at ${libraryFile}"

            # Load the library. We can recurse here!

            source "${libraryFile}" || fail "failed to load rayvn shared library '${qualifiedName}'"

            # TODO: make all sourced functions readonly so that we will detect collisions??

            # Call its init function, if present

            local initFunction="init_${projectName}_${libraryName}"
            if [[ $(type -t ${initFunction}) == function ]]; then
                ${initFunction} || fail "${initFunction}() failed"
            fi
        fi

        # Count the request

        (( _rayvnRequireCounts[${libraryKey}]++ ))

        shift
    done

    return 0
}

# bashsupport disable=BP3002
_configure() {
    local keySuffix projectName projectRoot key executable path packageFile

    _addRoot() {
        projectName="${1}"
        keySuffix="${2}"
        projectRoot="${3}"
        key="${projectName}${keySuffix}"
        [[ -v _rayvnProjects[${key}] ]] && fail "'${key}' already set"
        projectRoot="$(realpath "${projectRoot}")" || fail "Could not resolve real path of: ${projectRoot}"
        _rayvnProjects[${key}]="${projectRoot}"

        # Define a ${project}Home var for project self reference
        [[ ${keySuffix} == "${_projectRootSuffix}" ]] &&  declare -grx "${projectName}Home"="${projectRoot}"
    }

    _addProjectFromExecutable() {
        projectName="${1}"
        executable="${2}"
        path="$(type -p ${executable})" || fail "'${executable}' not found for project '${projectName}'"
        path="$(realpath "${path}")" || fail # handle symlinks, e.g. brew style
        projectRoot="$(dirname ${path})/.."
        _addRoot "${projectName}" "${_projectRootSuffix}" "${projectRoot}"
    }

    # bashsupport disable=BP3002
    _addPackage() {
        projectName="${1}"
        packageFile="${_rayvnProjects[${projectName}${_projectRootSuffix}]}/${rayvnPkgFileName}"
        sourceSafeStaticVars "${packageFile}" project

        # Add version and release date

        _rayvnProjects["${projectName}${_versionSuffix}"]="${projectVersion}"
        _rayvnProjects["${projectName}${_releaseDateSuffix}"]="${projectReleaseDate}"

        # Add the library project root if needed

        if [[ ${projectName} != rayvn && ${projectLibraries} ]]; then
            projectRoot="${_rayvnProjects[${projectName}${_projectRootSuffix}]}/${projectLibraries}"
            _addRoot "${projectName}" ${_libraryRootSuffix}  "${projectRoot}"
        fi

        unset projectName projectVersion projectReleaseDate projectLibraries projectBinaries
    }

    _addProject() {
        projectName="${1}"
        projectRoot="${2}"
        if [[ -e ${projectRoot} ]]; then
            _addRoot "${projectName}" ${_projectRootSuffix} "${projectRoot}"
        else
            _addProjectFromExecutable ${projectName} "${projectRoot}"
        fi
        _addPackage "${projectName}"
    }

    # Add rayvn

    _addProjectFromExecutable rayvn rayvn.up
    _addRoot rayvn ${_libraryRootSuffix} "${_rayvnProjects[rayvn${_projectRootSuffix}]}/lib"
    require 'rayvn/safe-env'
    _addPackage rayvn

    # Now, process arguments in two passes: add projects, then load any required libraries

    local required=()
    while (( ${#} > 0 )); do
        case "${1}" in
            -a | --add) shift; _addProject "${1%%=*}" "${1#*=}";;
            *) required+=("${1}") ;;
        esac
        shift
    done
    for (( i=0; i < ${#required[@]}; i++ )); do
            require "${required[i]}"
    done

    # Lock down the map and ensure it is both global and exported

    declare -grx _rayvnProjects

    # Prevent the require function from being replaced

    declare -rf require
}

# This function will be replaced when rayvn/core is loaded

fail() { echo "${@}"; exit 1; }

# Configure and then remove the function

_configure "${@}"; unset _configure
