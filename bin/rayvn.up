#!/usr/bin/env bash
# shellcheck disable=SC2317,SC1090

# Bootstrap rayvn shared library system.
# See https://github.com/phoggy/rayvn for details.

declare -grx rayvnBinaryName='rayvn'
declare -gxAi rayvnRequireCounts=()

require() {

    _exit() {
        if [[ ${1} ]]; then
            echo "${@}"
            exit 1
        else
            exit 0
        fi
    }

    local qualifiedName="${1}"
    local projectName="${qualifiedName%/*}"
    local libraryName="${qualifiedName#*/}"
    local libraryKey="${projectName}_${libraryName}"

    # Keep a count of requests for this project

    (( rayvnRequireCounts[${projectName}]++ ))

    # Have we previously loaded this library?

    if [[ ! ${rayvnRequireCounts[${libraryKey}]} ]]; then

        # Nope, validate the request

        local libraryRootKey="${projectName}::libraries"
        local libraryRoot="${rayvnProjectRoots[${libraryRootKey}]}"
        [[ ${libraryRoot} ]] || _exit "rayvn project '${projectName}' not found"

        local libraryFile="${libraryRoot}/${libraryName}.sh"
        [[ -f ${libraryFile} ]] || _exit "rayvn shared library '${qualifiedName}' not found at ${libraryFile}"

        # Load the library

        source "${libraryFile}" || _exit "failed to load rayvn shared library '${qualifiedName}'"

        # TODO: make all sourced functions readonly so that we will detect collisions??

        # Call its init function, if present

        local initFunction="init_${projectName}_${libraryName}"
        if [[ $(type -t ${initFunction}) == function ]]; then
            ${initFunction} || _exit "${initFunction}() failed"
        fi
    fi

    # Count the request

    (( rayvnRequireCounts[${libraryKey}]++ ))
}

_configure() {
    local rayvnUpBin rootName projectRoot rootName projectHomeVar

    # Create the project roots map if not already defined.
    # Any projects in addition to rayvn must already be configured.

    if ! declare -p rayvnProjectRoots &> /dev/null; then
        declare -gA rayvnProjectRoots=()
    fi

    # Set the rayvn project root if not already set

    if [[ ! -v rayvnProjectRoots[rayvn::project] ]]; then

        # Find and resolve our dir, handling the brew symlink case

        rayvnUpBin=$(which rayvn.up)
        rayvnUpBin="$(realpath "${rayvnUpBin}")"
        projectRoot="$(dirname ${rayvnUpBin})/.."
        rayvnProjectRoots[rayvn::project]="${projectRoot}"
    fi

    # Process all roots to ensure they are valid and an absolute path

    for rootName in "${!rayvnProjectRoots[@]}"; do
        projectRoot="${rayvnProjectRoots[${rootName}]}"
        projectRoot="$(realpath "${projectRoot}")" || exit 1
        rayvnProjectRoots[${rootName}]="${projectRoot}"
    done

    # Now process all project roots and ensure a library path is in the
    # map. Also define a "${project}Home" variable for each.

    for rootName in "${!rayvnProjectRoots[@]}"; do
        if [[ "${rootName}" == *::project ]]; then
            local projectName="${rootName%::project}"
            local projectRoot="${rayvnProjectRoots[${rootName}]}"
            local libraryKey="${projectName}::libraries"

            if [[ ! ${rayvnProjectRoots[${libraryKey}]} ]]; then

                # No library root, so add it assuming it is just ./lib

                rayvnProjectRoots[${libraryKey}]="${projectRoot}/lib"
            fi

            # Define a ${project}Home var for project self reference

            projectHomeVar="${projectName}Home"
            declare -grx ${projectHomeVar}="${projectRoot}"
        fi
    done

    # Lock down the map and ensure it is both global and exported

    declare -grx rayvnProjectRoots

    # Load any libraries passed to us

    while (( ${#} > 0 )); do
        require "${1}"; shift
    done

    # Prevent the require function from being replaced

    declare -rf require
}

# Configure and then remove the function

_configure "${@}"; unset _configure
